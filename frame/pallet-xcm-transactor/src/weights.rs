// This file is part of Astar.

// Copyright (C) 2019-2023 Stake Technologies Pte.Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later

// Astar is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Astar is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Astar. If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_xcm_transactor
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-17, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `AV`, CPU: `AMD Ryzen 7 5800H with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("shibuya-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/astar-collator
// benchmark
// pallet
// --chain=shibuya-dev
// --pallet=pallet_xcm_transactor
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --steps=50
// --repeat=20
// --template=./scripts/templates/weight-template.hbs
// --output=weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_xcm_transactor.
pub trait WeightInfo {
	fn account_id() -> Weight;
	fn prepare_execute() -> Weight;
	fn execute() -> Weight;
	fn validate_send() -> Weight;
	fn take_response() -> Weight;
	fn new_query() -> Weight;
	fn on_callback_recieved() -> Weight;
}

/// Weights for pallet_xcm_transactor using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn account_id() -> Weight {
		// Minimum execution time: 831 nanoseconds.
		Weight::from_ref_time(921_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	fn prepare_execute() -> Weight {
		// Minimum execution time: 1_964 nanoseconds.
		Weight::from_ref_time(2_454_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn execute() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	// Storage: PolkadotXcm SupportedVersion (r:1 w:0)
	// Proof Skipped: PolkadotXcm SupportedVersion (max_values: None, max_size: None, mode: Measured)
	// Storage: PolkadotXcm VersionDiscoveryQueue (r:1 w:1)
	// Proof Skipped: PolkadotXcm VersionDiscoveryQueue (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: PolkadotXcm SafeXcmVersion (r:1 w:0)
	// Proof Skipped: PolkadotXcm SafeXcmVersion (max_values: Some(1), max_size: None, mode: Measured)
	fn validate_send() -> Weight {
		// Minimum execution time: 16_070 nanoseconds.
		Weight::from_ref_time(16_421_000)
			.saturating_add(Weight::from_proof_size(5274))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: XcmTransact CallbackQueries (r:1 w:0)
	// Proof: XcmTransact CallbackQueries (max_values: None, max_size: Some(662), added: 3137, mode: MaxEncodedLen)
	// Storage: PolkadotXcm Queries (r:1 w:1)
	// Proof Skipped: PolkadotXcm Queries (max_values: None, max_size: None, mode: Measured)
	fn take_response() -> Weight {
		// Minimum execution time: 46_087 nanoseconds.
		Weight::from_ref_time(47_109_000)
			.saturating_add(Weight::from_proof_size(6755))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: PolkadotXcm QueryCounter (r:1 w:1)
	// Proof Skipped: PolkadotXcm QueryCounter (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: XcmTransact CallbackQueries (r:0 w:1)
	// Proof: XcmTransact CallbackQueries (max_values: None, max_size: Some(662), added: 3137, mode: MaxEncodedLen)
	// Storage: PolkadotXcm Queries (r:0 w:1)
	// Proof Skipped: PolkadotXcm Queries (max_values: None, max_size: None, mode: Measured)
	fn new_query() -> Weight {
		// Minimum execution time: 29_375 nanoseconds.
		Weight::from_ref_time(31_400_000)
			.saturating_add(Weight::from_proof_size(2367))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: XcmTransact CallbackQueries (r:1 w:1)
	// Proof: XcmTransact CallbackQueries (max_values: None, max_size: Some(662), added: 3137, mode: MaxEncodedLen)
	fn on_callback_recieved() -> Weight {
		// Minimum execution time: 28_414 nanoseconds.
		Weight::from_ref_time(29_886_000)
			.saturating_add(Weight::from_proof_size(3137))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn account_id() -> Weight {
		// Minimum execution time: 831 nanoseconds.
		Weight::from_ref_time(921_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	fn prepare_execute() -> Weight {
		// Minimum execution time: 1_964 nanoseconds.
		Weight::from_ref_time(2_454_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	// Storage: Benchmark Override (r:0 w:0)
	// Proof Skipped: Benchmark Override (max_values: None, max_size: None, mode: Measured)
	fn execute() -> Weight {
		// Minimum execution time: 18_446_744_073_709_551 nanoseconds.
		Weight::from_ref_time(18_446_744_073_709_551_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	// Storage: PolkadotXcm SupportedVersion (r:1 w:0)
	// Proof Skipped: PolkadotXcm SupportedVersion (max_values: None, max_size: None, mode: Measured)
	// Storage: PolkadotXcm VersionDiscoveryQueue (r:1 w:1)
	// Proof Skipped: PolkadotXcm VersionDiscoveryQueue (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: PolkadotXcm SafeXcmVersion (r:1 w:0)
	// Proof Skipped: PolkadotXcm SafeXcmVersion (max_values: Some(1), max_size: None, mode: Measured)
	fn validate_send() -> Weight {
		// Minimum execution time: 16_070 nanoseconds.
		Weight::from_ref_time(16_421_000)
			.saturating_add(Weight::from_proof_size(5274))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: XcmTransact CallbackQueries (r:1 w:0)
	// Proof: XcmTransact CallbackQueries (max_values: None, max_size: Some(662), added: 3137, mode: MaxEncodedLen)
	// Storage: PolkadotXcm Queries (r:1 w:1)
	// Proof Skipped: PolkadotXcm Queries (max_values: None, max_size: None, mode: Measured)
	fn take_response() -> Weight {
		// Minimum execution time: 46_087 nanoseconds.
		Weight::from_ref_time(47_109_000)
			.saturating_add(Weight::from_proof_size(6755))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: PolkadotXcm QueryCounter (r:1 w:1)
	// Proof Skipped: PolkadotXcm QueryCounter (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: XcmTransact CallbackQueries (r:0 w:1)
	// Proof: XcmTransact CallbackQueries (max_values: None, max_size: Some(662), added: 3137, mode: MaxEncodedLen)
	// Storage: PolkadotXcm Queries (r:0 w:1)
	// Proof Skipped: PolkadotXcm Queries (max_values: None, max_size: None, mode: Measured)
	fn new_query() -> Weight {
		// Minimum execution time: 29_375 nanoseconds.
		Weight::from_ref_time(31_400_000)
			.saturating_add(Weight::from_proof_size(2367))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: XcmTransact CallbackQueries (r:1 w:1)
	// Proof: XcmTransact CallbackQueries (max_values: None, max_size: Some(662), added: 3137, mode: MaxEncodedLen)
	fn on_callback_recieved() -> Weight {
		// Minimum execution time: 28_414 nanoseconds.
		Weight::from_ref_time(29_886_000)
			.saturating_add(Weight::from_proof_size(3137))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
