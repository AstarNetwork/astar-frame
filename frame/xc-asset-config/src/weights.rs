//! Autogenerated weights for `pallet_xc_asset_config`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-01, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("shibuya-dev"), DB CACHE: 1024
//! 
//! It is recommended to re-run this per chain since the callbacks might incur additional overhead.
//! 

// Executed Command:
// ./target/release/astar-collator
// benchmark
// pallet
// --chain
// shibuya-dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_xc_asset_config
// --steps
// 20
// --repeat
// 10
// --extrinsic
// *
// --output
// .

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_asset_manager.
pub trait WeightInfo {
	fn register_asset_location() -> Weight;
	fn set_asset_units_per_second() -> Weight;
	fn change_existing_asset_location() -> Weight;
	fn remove_payment_asset() -> Weight;
	fn remove_asset() -> Weight;
}

/// Weights for pallet_asset_manager using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: XcAssetConfig AssetIdToLocation (r:1 w:1)
	// Storage: XcAssetConfig AssetLocationToId (r:0 w:1)
	fn register_asset_location() -> Weight {
		(14_557_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: XcAssetConfig AssetLocationToId (r:1 w:0)
	// Storage: XcAssetConfig AssetLocationUnitsPerSecond (r:0 w:1)
	fn set_asset_units_per_second() -> Weight {
		(17_533_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: XcAssetConfig AssetIdToLocation (r:1 w:1)
	// Storage: XcAssetConfig AssetLocationUnitsPerSecond (r:1 w:2)
	// Storage: XcAssetConfig AssetLocationToId (r:0 w:2)
	fn change_existing_asset_location() -> Weight {
		(25_998_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: XcAssetConfig AssetLocationUnitsPerSecond (r:0 w:1)
	fn remove_payment_asset() -> Weight {
		(11_301_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: XcAssetConfig AssetIdToLocation (r:1 w:1)
	// Storage: XcAssetConfig AssetLocationUnitsPerSecond (r:0 w:1)
	// Storage: XcAssetConfig AssetLocationToId (r:0 w:1)
	fn remove_asset() -> Weight {
		(16_500_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: XcAssetConfig AssetIdToLocation (r:1 w:1)
	// Storage: XcAssetConfig AssetLocationToId (r:0 w:1)
	fn register_asset_location() -> Weight {
		(14_557_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: XcAssetConfig AssetLocationToId (r:1 w:0)
	// Storage: XcAssetConfig AssetLocationUnitsPerSecond (r:0 w:1)
	fn set_asset_units_per_second() -> Weight {
		(17_533_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: XcAssetConfig AssetIdToLocation (r:1 w:1)
	// Storage: XcAssetConfig AssetLocationUnitsPerSecond (r:1 w:2)
	// Storage: XcAssetConfig AssetLocationToId (r:0 w:2)
	fn change_existing_asset_location() -> Weight {
		(25_998_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: XcAssetConfig AssetLocationUnitsPerSecond (r:0 w:1)
	fn remove_payment_asset() -> Weight {
		(11_301_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: XcAssetConfig AssetIdToLocation (r:1 w:1)
	// Storage: XcAssetConfig AssetLocationUnitsPerSecond (r:0 w:1)
	// Storage: XcAssetConfig AssetLocationToId (r:0 w:1)
	fn remove_asset() -> Weight {
		(16_500_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
}
